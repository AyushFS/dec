name: Build and Deploy to Cloud

on:
  release:
    types: [published]

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write
  contents: read

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  PROD_AWS_ROLE_ARN: 'arn:aws:iam::${{ secrets.PROD_ACCOUNT_ID }}:role/DeployProd'
  BUCKET_NAME_PROD: ${{ secrets.BUCKET_NAME_PROD }}
  CLOUDFRONT_DISTRIBUTION_ID_PROD: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}

jobs:
  pre-deploy-checks:
    name: 'ðŸ§ª Test'
    runs-on: ubuntu-latest

    steps:
      - name: Configure Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Checkout master branch
        uses: actions/checkout@master

      - name: Cache Node.js modules
        id: cache-npm-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-npm-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ./node_modules
          key: ${{ runner.OS }}-node-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - if: ${{ steps.cache-npm-modules.outputs.cache-hit == 'false' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install Node Dependencies
        if: steps.cache-npm-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run Test cases
        run: npm run test:ci

  deploy-to-cloud-based-on-release:
    needs: pre-deploy-checks
    name: ðŸš€ Release and deploy ${{ github.event.release.tag_name }} - ${{ github.event.release.name }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Checkout master branch
        uses: actions/checkout@master

      - name: Cache Node.js modules
        id: cache-npm-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-npm-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ./node_modules
          key: ${{ runner.OS }}-npm-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-
            ${{ runner.OS }}-npm-
            ${{ runner.OS }}-

      - name: List the state of node modules
        if: ${{ steps.cache-npm-modules.outputs.cache-hit == 'false' }}
        continue-on-error: true
        run: npm list

      - name: Install Node Dependencies
        if: steps.cache-npm-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: ðŸ“¦ Build App
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'ap-southeast-1'
      - name: ðŸš¢ Ship to Cloud (PROD)
        id: prod-assume-role
        run: |
          aws s3 sync ./build/ s3://${{ env.BUCKET_NAME_PROD }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_PROD }} --paths "/*"
